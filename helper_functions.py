# -*- coding: utf-8 -*-
"""helper_functions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11NVrevVFonR6Z1hesU65INL25tG4r0ug
"""

def plot_loss_curves(history):
  """
  Returns seprate loss curves for training and validation metrics.

  Args:
  history:Tensorflow History object.

  Returns of training/validation loss and accuracy metrics
  """
    
  import matplotlib.pyplot as plt
  loss=history.history["loss"]
  val_loss=history.history["val_loss"]

  accuracy=history.history["accuracy"]
  val_accuracy=history.history["val_accuracy"]

  epochs=range(len(history.history["loss"]))

  #Plot loss

  plt.plot(epochs, loss, label="training_loss")
  plt.plot(epochs, val_loss, label="val_loss")
  plt.title("Loss")
  plt.xlabel("Epochs")
  plt.legend


  #Plot accuracy
  plt.figure()
  plt.plot(epochs, accuracy, label="training_accuracy")
  plt.plot(epochs, val_accuracy, label="val_accuracy")
  plt.title("Accrucacy")
  plt.xlabel("Epochs")
  plt.legend()


def create_tensorboard_callback(dir_name, experiment_name):
  log_dir=dir_name+ "/" + experiment_name + "/" + datetime.datetime.now().strftime("%Y%m%d-H%M%S")
  tensorboard_callback = tf.keras.callbacks.TensorBoard(
      log_dir=log_dir
  )
  print(f"Saving TensorBoard log files to:{log_dir}")
  return tensorboard_callback


#Let's make a create() function to create a model from a URL
def create_model(model_url, num_classes=10):
  """
  Takes a tensorflow hub url and creates a keras seuential model with ir.

  args:
    model_url(str): A tensorflow hub feature extraction URL
    num_classes(int): Number of output neuron in the output layer, should
    be equal to number of target classes, defautl 10.

  Returns:
    An uncompiled keras Sequential model with model_url as feature extractor layer and Dense output layer 
    with num_classes
    output neuron
  """
  #Dowload the rpetained model and save it as layer
  feature_extractor_layer=hub.KerasLayer(model_url, 
                                          trainable=False,
                                          name='feature_extraction_layer',
                                          input_shape=IMAGE_SHAPE+(3,)) # freeze the already learned patterns

  #Create our own model
  model=tf.keras.Sequential([
      feature_extractor_layer,
      tf.keras.layers.Dense(num_classes, activation="softmax", name="output_layer")
  ])

  return model
